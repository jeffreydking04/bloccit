June 30, 2016

Assignment 33-Questions Resource

Two days later and I am back on the hunt.  I opened up the project in Cloud 9 yesterday, wrote some code, started the server to make sure I was getting the right results and got a path error from Cloud 9 again.  

I am very certain I did nothing to corrupt my path and that this was a Cloud 9 problem, not a jdking problem (my code worked fine when I cloned it to a new project).  It was the second time that it had happened. 

In addition, Cloud 9 did not respond when I contacted them.  I know I am not a paying customer, but guess what? One day I am going to be a professional developer and I will not be using Cloud 9 because they did not have the time for me when I was using their free service.  

I am pretty certain that the fix would have been fairly easy if I knew where Cloud 9 kept all their files.  I think they have a bug related to the path and their local host and I would just need to reconnect the project with the url (I know I really do not know what I am talking about here, but my google searches led me to believe that a simple edit to the PATH would fix it).

In any case, I decided to use a USB stick to set up a bootable Linux environment.  I got it up and running and chose Linux Mint because it was recommended as the best linux distrobution for desktop by some random site that I do not recall the name of. 

I found out after installing it that Linux Mint had a security breach back in February, but that was addressed.  Linux Mint is supposed to have a extremely enthusiastic community, which is helpful when problems arise.  

So far the experience has been good.  I was able to get rvm, sublime (I am so glad to be back in the sublime editor), ruby, and rails up and running.  I get better at googling the process to fix the inevitable error messages you get when trying to set everything up.

For example: ubuntu (of which linux mint is a derivative) has security features which inhibit certain kinds of global commands (I think).  There is a command with rvm (ruby version control package) that sets the default ruby version, but ubuntu will not let that run.  Googling the issue led me to a fix which led to the standard install instructions working like a charm.  

To make a long story less long, I managed to clone my project in the new environment and I am now up and running on the Linux OS with the most important applications (mail, skype, slack, my homepage) set up for easy access.  

It feels good to have everything be truly local.  I am not very trusting of cloud resources and I am glad to be done with it.  This will also allow me to use brackets as my html/css editor.  Brackets looks really nice.  With an IDE like Cloud 9, you are pretty much stuck with their editors.  Now I can jump around to whatever editor best suits my task.

The above will go in as a blog entry, but onward with the project log.  I am writing the questions assignment and feeling good.

It is a few hours later.  Still learning to get around in the new environment, but I am liking it more and more.  The questions resource assignment was pretty easy.  I can write pretty much everything except a few of the tests and some of the html without consulting the previous work.  

The only new item in the assignment was working with a checkbox, but that just required another div in the form with f.label :resources and f.check_box :resources.  Easy enough

Checkpoint 34-Topics Resource

We are creating a new resource, topic which has name:string, description:text, and public:boolean attributes.  After generating the model, we of course run rake db:migrate.

Oops, but we only run the migration after we set a default value to public of true.  So let us practice rolling back migrations. 

  rake db:rollback

This should take us back one migration, which is what we want. 

The rollback worked fine, but one thing I learned is that sometimes sublime text, just like the Cloud 9 IDE, does not recognize that folders or files have been added.  Under the project tab, there is a refresh folders option.

Another thing I did not process fully the first time through is that we can set default values in the table itself, just by adding a default value on the line that creates the attribute column:

  t.boolean :public, default: true.  

I am sure there is a way to do this even if want to add it much later in the process.

Let us write some tests. :)

There are some interesting things going on in this test (and some things I do not like).  First, unlike the other model tests we wrote, we assigned variables for each of the attributes and let name and description attributes be random, while declaring public to be true.  Then we assigned topic to be a Topic created with the created name and description variables.  We did not test for existence (.not_to be_nil), so I added that test.

We then did test that the attributes were assigned correctly, even if it was a more round about way to do it, but we also tested that public: public (where we had assigned true to public above).  But when we created topic, we did not assign the public attribute.  This means that in order to pass the second test, the default had to be applied, but still we wrote another test to test this again.  

And one more thing instead of using .to eq(true), we used .to be(true).  I am guessing they are synonymous but maybe with Booleans you have to use be instead of eq.

Just as I suspected, we can use either eq or be in this case.  I do not know if this means they are completely synonymous or not.  Interesting stuff you find by googling, but apparently they behave the same way.  Further you can use == or equal and, finally, you can use:

  topic.public.should 

instead of:

  expect(topic.public).to

Neat stuff. I am glad we have 500 ways to say the same thing.  It would be so much harder to only learn one syntax, amiright?

We are going to add the shoulda gem to the development and test environments.  Do not forget to run bundle.  Bloc tells us that shoulda adds some nice methods that rspec has not and will make our lives easier.

Back to our topic model specs, we add a shoulda test with yet more new syntax:

  it { is_expected.to have_many(:posts) }

We do not do this in a describe block. It is a stand alone test we run before we run any rspec specific tests.

We are also going rewrite the tests in post_spec.rb so that they mirror the way we wrote the tests for the topic model, including creating random name, description, title, and body variables before creating a topic, then we will call topic.posts.create! to create a post associated with the topic.  

We will use shoulda to test that it belongs to the topic. Interesting observation: the shoulda test does not specify what the it is, so I am guessing that it goes to its immediate precedent to test.  In other words, we create the post and the next instruction is a shoulda test that tests that post.  This could get weird.  I wonder if there is a way to specify the object being tested.

Aha, it appears that shoulda tests the class itself.  Rspec tests start with:

  RSpec.describe Post, type: model (for example) do

So the it is a reference to the class Post, I believe.  Basically we are testing that the model is being told that what kinds of associations it has.

We are also going to rewrite the comments spec so that a topic is created first, then a post that is created with topic.posts.create!

Bloc, wisely reintroduces us to associations at this point, reiterating that objects of one class have an association with one or more objects in another class, and those associations are simply foreign keys (which sounds like intimidating techie lingo, but really just means that the foreign object (the topic the post belongs too) has an id number that we call the foreign key and we store in a column in the post table).  

Now just like the post table has no column to store its association with its comments (it is easier to have this column exist in the comments table because each comment is associated with exactly one post, then the has_many comments line in post.rb gives a post access to a method of collecting its comments via post_instance.comments), the topic table does not need to have a column to keep track of its posts.  Because each post will have an association with exactly one topic, it makes more sense to add the column to the posts' table.  

However, we have already created the posts' table.  What are we to do? The answer is that we can create a new migration that adds to an existing database table:

  rails generate migration AddTopicToPosts topic_id:integer:index

This tells rails to generate a migration class that will append a new column in the posts' table in the database. The new column will have hold the integer value that is the id of the topic the post is associated with.  We want to index the column (columns are not automatically indexed) for more efficient searching.

The Add To Camel Case of the generation is important: we want to add a table to a table.  The migration file has a method called change.  It specifies to add_column to :posts, labelled :topic_id, which is an :integer.  

Then it specifies to add_index to :posts on the :topic_id column.  

Bloc reminds us to always index foreign keys, which just means adding an index to the column which contains the id of the object our primary object is associated with.

Let us run the migration and add the belongs_to :topic to post.rb and the has_many :posts to topic.rb.  Remember that our tests are now testing these additions and that they provide us with methods to get information about the objects our instances are associated with easily.

All tests should be passing now.  Cross you fingers, typo boy.  And, sure enough, I had 3 typos.  I ran all the model spec tests at once by:
  
  rspec spec/models

Also, I had no color on my tests but that is because I needed to run:

  rails generate rspec;install

because I had run it for the assignment in 33 after changing enviroments, so it was not installed locally, but because I did not merge that assignment, it still needed to be done for this branch, which will be merged.

We need to quickly rewrite our seeds.rb to seed some topics and had a topic id to the seeded posts, via sampling an array of all topics.  Then we nuke the existing database and create a new one via rake db:reset.

Now we are going to create our controller and views and create our routes.  There may be little commentary at this point, because we have done it all before.

July 1, 2016

I am about half way through this very long Checkpoint and so far, there is really no need to comment on building the topic resource, beyond what I have already discussed about using shoulda and kind of reworking the model test suite.  I believe I am going to be nesting the routes for posts inside of topics soon though, so I will certainly want to write about that.

The one thought I did have was about trying to make this stuff accessible to the complete noob and I think that for everyone, the way to approach the RESTful architecture is to really think about what the core task of what each method is, then think about how it accomplishes what it is supposed to do.  That seems to be helping my understanding.

Wow, nesting posts is a long section, but that is because when we nest the posts inside of topics, we now have completely different expectations for the behavior of posts.  We are going to next the routes inside of the topics routes and we are only going index posts in the topics show view, and then we are only going to index those posts that are associated with the topic.  

We are also going to rewrite the controller so that posts cannot be created without an association to a topic.  Basically, we have to rewrite nearly every part of the posts' resource.

As usual, we start with the tests: posts_controller_spec.rb.

At the very start of the controller spec, we are currently creating a post without reference to a topic.  Since the whole goal of nesting here is to make sure all of our posts are associated with topics, we have to create a topic first, then create the post via:
  
  topic_instance.posts.create!

Post.create! is something we never want to call again (at least not without specifying a topic_id in the parameters).

We are also going to get rid of the index tests because we will not have a posts' index view.  Posts will be shown in the #show view of their associated topic.

Every single test in the posts' controller spec calls a method via a route, but we are going to nest the routing.  Every call now needs a topic_id as part of the parameters or needs to be specified in the URI pattern.  I think we should have nested the routes first and then raked the routes to make it clear why this test calls have to be changed.  Looking at the routes after routing will show that every post route has to have a topic id and the URI pattern will start with:

  topic/:id/

But after that, they will be the same, so for every test written, whenever we call a post action, we have to insert 

  topic_id: my_topic.id

So on to it.

Further, whenever we are redirecting to a Post show, which we do when we create and update, we have to include my_topic as the first parameter.

In the update test, Bloc writes the redirect as an array: [my_topic, my_post] and I am not sure why.  I am going to leave it in parens and see if it works.  I do not get the array notation here because we are just passing parameters.  My guess is that Rails will figure it out either way.

And the very last test needs to be rewritten completely because it specifies a redirect to the posts' index which no longer exists.  We just want to redirect back to the topic.

Now we are going to nest the routes.

July 2, 2016

Still in Checkpoint 34

This is taking too long, although I do believe it is a great exercise.  I am going to have to be less verbose with my logging though.  

Okay we nest the routes by appending a (do end) block to the resources :topics line and then putting resources :posts, except: [:index] in the block.  Remember we are removing the index method, so we exclude it from the routes.

Remember that using resources :model creates 8 routes, but we took one out.  All this change did was remove the index route, add topic_ in front of every post reference in the prefix helper, and changed the URI pattern with a prepending of topics/topic_id. 

Now using the posts#new helper path would look like this:
  
  new_topic_post_path(topic_id)

And going to the edit method like this:

  edit_topic_post_path(topic_id, post_id)

I was wrong above about the way the redirect statements work.  The redirect_to command is expecting a single parameter.  If multiple ids are needed in the parameter, it must be passed as an array. 

We rewrote the posts controller so that all of the redirects now have an array of the topic_id and post_id being passed and the destroy method redirects to the topic the post was deleted from.  We also made sure that the new and create methods were assigning @topic so that a new post had a topic associated with it and we assigned the topic attribute in #create to @topic (which is interesting because helpers must be involved here because the attribute is really the topic_id foreign key.  Que sera: we can use this syntax and Rails does the right thing.)

We need to fix our views so that all the link_to and form_for helpers go to the right paths.  We are also going to insert a created at time under the post.  And the number of comments it has.

The tests all pass, but I remember having some trouble with the development site.  Let us see.

I suspect the problems I was having last time through were user error.  I assigned @topic in both edit and update, but I am not sure what error I was getting or why I thought that was necessary.  Once the post is created correctly, it will have a topic associated with it and it can be directly accessed.  Further, this is information that will never be updated.

I suspect that I was dealing with old posts that had been created before I created topics, then ran into erros editing and deleting them because the topic_id was nil, but that is only a guess.  Who knows what I was thinking?

We are going to add a link in the nav bar to  the topics index in application.html.erb.

























